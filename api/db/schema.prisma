datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:

model Building {
  id          Int      @id @unique @default(autoincrement())
  name        String
  notes       String?
  description String
  address     String
  createdAt   DateTime
  // Contract    Contract[]
  // Job         Job[]
}

model Category {
  id    Int     @id @unique @default(autoincrement())
  name  String  @unique
  notes String?
  // Contract   Contract? @relation(fields: [contractId], references: [id])
  // contractId Int?
  // Job        Job?      @relation(fields: [jobId], references: [id])
  // jobId      Int?
}

model Contract {
  id        Int       @id @unique @default(autoincrement())
  name      String
  notes     String?
  startDate DateTime?
  endDate   DateTime?
  amount    Float?
  // building   Building   @relation(fields: [buildingId], references: [id])
  // categories Category[]
  // job        Job[]
  // contacts   Contact[]
  // company    Company?   @relation(fields: [companyId], references: [id])
  // payments   Payment[]
  // buildingId Int
  // companyId  Int?
}

model Job {
  id     Int       @id @unique @default(autoincrement())
  name   String
  notes  String?
  date   DateTime?
  amount Float?
  // payments   Payment[]
  // contract   Contract?  @relation(fields: [contractId], references: [id])
  // contacts   Contact[]
  // company    Company?   @relation(fields: [companyId], references: [id])
  // building   Building   @relation(fields: [buildingId], references: [id])
  // categories Category[]
  // contractId Int?
  // companyId  Int?
  // buildingId Int?
}

model Company {
  id    Int     @id @unique @default(autoincrement())
  name  String  @unique
  notes String?
  // contacts Contact[]
  // Contract Contract[]
  // Job      Job[]
  // Payment  Payment[]
  // Payment Payment[]
}

model Contact {
  id    Int     @id @unique @default(autoincrement())
  name  String  @unique
  email String?
  phone String?
  notes String?
  // Contract   Contract? @relation(fields: [contractId], references: [id])
  // contractId Int?
  // Job        Job?      @relation(fields: [jobId], references: [id])
  // jobId      Int?
  // Company    Company?  @relation(fields: [companyId], references: [id])
  // companyId  Int?
  // Payment    Payment[]
}

model Payment {
  id     Int       @id @unique @default(autoincrement())
  amount Float?
  date   DateTime?
  note   String?
  // contract   Contract? @relation(fields: [contractId], references: [id])
  // job        Job?      @relation(fields: [jobId], references: [id])
  // contact    Contact?  @relation(fields: [contactId], references: [id])
  // company    Company?  @relation(fields: [companyId], references: [id])
  // contractId Int?
  // jobId      Int?
  // contactId  Int?
  // companyId  Int?
}

model User {
  id                  Int       @id @unique @default(autoincrement())
  email               String    @unique
  name                String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
}
