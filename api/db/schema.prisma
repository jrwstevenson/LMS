datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:

model Building {
  id        Int        @id @unique @default(autoincrement())
  name      String
  notes     String?
  address   String?
  contacts  Contact[]
  contracts Contract[]
  jobs      Job[]
}

model Category {
  id        Int        @id @unique @default(autoincrement())
  name      String     @unique
  notes     String?
  contracts Contract[]
  jobs      Job[]
}

model Contract {
  id         Int        @id @unique @default(autoincrement())
  name       String
  notes      String?
  startDate  DateTime?
  endDate    DateTime?
  amount     Float?
  building   Building   @relation(fields: [buildingId], references: [id])
  buildingId Int
  company    Company?   @relation(fields: [companyId], references: [id])
  companyId  Int?
  categories Category[]
  contacts   Contact[]
  jobs       Job[]
  payments   Payment[]
}

model Job {
  id         Int        @id @unique @default(autoincrement())
  name       String
  notes      String?
  date       DateTime?
  amount     Float?
  building   Building?  @relation(fields: [buildingId], references: [id])
  buildingId Int?
  company    Company?   @relation(fields: [companyId], references: [id])
  companyId  Int?
  contract   Contract?  @relation(fields: [contractId], references: [id])
  contractId Int?
  categories Category[]
  contacts   Contact[]
  payments   Payment[]
}

model Company {
  id        Int        @id @unique @default(autoincrement())
  name      String     @unique
  notes     String?
  contacts  Contact[]
  contracts Contract[]
  jobs      Job[]
}

model Contact {
  id         Int       @id @unique @default(autoincrement())
  name       String    @unique
  email      String?
  phone      String?
  notes      String?
  building   Building? @relation(fields: [buildingId], references: [id])
  buildingId Int?
  company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
  contract   Contract? @relation(fields: [contractId], references: [id])
  contractId Int?
  job        Job?      @relation(fields: [jobId], references: [id])
  jobId      Int?
}

model Payment {
  id         Int       @id @unique @default(autoincrement())
  amount     Float?
  date       DateTime?
  notes      String?
  contract   Contract? @relation(fields: [contractId], references: [id])
  contractId Int?
  job        Job?      @relation(fields: [jobId], references: [id])
  jobId      Int?
}

model User {
  id                  Int       @id @unique @default(autoincrement())
  email               String    @unique
  name                String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
}
